
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraphicsInputParser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraphicsInputParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraphicsInputParser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraphicsInputParser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\003\006\000\002\011\021\000\002\006\013" +
    "\000\002\005\023\000\002\004\012\000\002\007\011\000" +
    "\002\010\011\000\002\012\005\000\002\013\011\000\002" +
    "\014\023\000\002\015\005\000\002\016\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\004\004\001\002\000\006\005\007\006" +
    "\010\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\015\101\001\002\000\004\015\011\001" +
    "\002\000\004\010\014\001\002\000\004\016\100\001\002" +
    "\000\004\010\025\001\002\000\004\021\015\001\002\000" +
    "\004\021\016\001\002\000\004\023\017\001\002\000\004" +
    "\022\020\001\002\000\004\021\021\001\002\000\004\021" +
    "\022\001\002\000\004\011\023\001\002\000\004\010\ufffa" +
    "\001\002\000\004\010\047\001\002\000\004\017\026\001" +
    "\002\000\004\021\027\001\002\000\004\021\030\001\002" +
    "\000\004\023\031\001\002\000\004\022\032\001\002\000" +
    "\004\021\033\001\002\000\004\021\034\001\002\000\004" +
    "\007\035\001\002\000\004\021\036\001\002\000\004\021" +
    "\037\001\002\000\004\023\040\001\002\000\004\022\041" +
    "\001\002\000\004\021\042\001\002\000\004\021\043\001" +
    "\002\000\004\020\044\001\002\000\004\011\045\001\002" +
    "\000\004\010\ufffb\001\002\000\004\010\060\001\002\000" +
    "\004\017\050\001\002\000\004\022\051\001\002\000\004" +
    "\007\052\001\002\000\004\022\053\001\002\000\004\012" +
    "\054\001\002\000\004\022\055\001\002\000\004\020\056" +
    "\001\002\000\004\011\057\001\002\000\004\010\ufffc\001" +
    "\002\000\004\017\062\001\002\000\004\016\ufffe\001\002" +
    "\000\004\015\063\001\002\000\004\022\064\001\002\000" +
    "\004\007\065\001\002\000\004\022\066\001\002\000\004" +
    "\016\067\001\002\000\004\007\070\001\002\000\004\015" +
    "\071\001\002\000\004\022\072\001\002\000\004\007\073" +
    "\001\002\000\004\022\074\001\002\000\004\016\075\001" +
    "\002\000\004\020\076\001\002\000\004\011\077\001\002" +
    "\000\006\010\ufffd\016\ufffd\001\002\000\004\002\uffff\001" +
    "\002\000\004\010\014\001\002\000\004\010\106\001\002" +
    "\000\004\016\104\001\002\000\004\002\000\001\002\000" +
    "\004\010\111\001\002\000\004\023\107\001\002\000\004" +
    "\011\110\001\002\000\004\010\ufff4\001\002\000\004\017" +
    "\140\001\002\000\004\010\113\001\002\000\004\017\132" +
    "\001\002\000\004\010\116\001\002\000\004\010\060\001" +
    "\002\000\004\022\117\001\002\000\004\011\120\001\002" +
    "\000\004\010\ufff7\001\002\000\004\010\123\001\002\000" +
    "\004\016\ufff9\001\002\000\004\021\124\001\002\000\004" +
    "\021\125\001\002\000\004\023\126\001\002\000\004\021" +
    "\127\001\002\000\004\021\130\001\002\000\004\011\131" +
    "\001\002\000\004\016\ufff8\001\002\000\004\022\133\001" +
    "\002\000\004\007\134\001\002\000\004\022\135\001\002" +
    "\000\004\020\136\001\002\000\004\011\137\001\002\000" +
    "\004\010\ufff6\001\002\000\004\021\141\001\002\000\004" +
    "\021\142\001\002\000\004\023\143\001\002\000\004\022" +
    "\144\001\002\000\004\021\145\001\002\000\004\021\146" +
    "\001\002\000\004\007\147\001\002\000\004\021\150\001" +
    "\002\000\004\021\151\001\002\000\004\023\152\001\002" +
    "\000\004\022\153\001\002\000\004\021\154\001\002\000" +
    "\004\021\155\001\002\000\004\020\156\001\002\000\004" +
    "\011\157\001\002\000\004\010\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\011\004\012\001\001\000\002\001" +
    "\001\000\004\005\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\101\007\102\001\001\000\004\015" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\113\001\001" +
    "\000\002\001\001\000\004\012\114\001\001\000\004\011" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraphicsInputParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraphicsInputParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraphicsInputParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol s;

	public void syntax_error(Symbol s){
		this.s = s;
	}

	public Symbol getS(){
		return this.s;
	}

 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraphicsInputParser$actions {
  private final GraphicsInputParser parser;

  /** Constructor */
  CUP$GraphicsInputParser$actions(GraphicsInputParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$GraphicsInputParser$do_action_part00000000(
    int                        CUP$GraphicsInputParser$act_num,
    lr_parser CUP$GraphicsInputParser$parser,
    java.util.Stack            CUP$GraphicsInputParser$stack,
    int                        CUP$GraphicsInputParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$GraphicsInputParser$result;

      /* select the action based on the action number */
      switch (CUP$GraphicsInputParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-1)).left;
		int start_valright = ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-1)).value;
		RESULT = start_val;
              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-1)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraphicsInputParser$parser.done_parsing();
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= DEF BARRAS LLAVEABRE grafica_pie LLAVECIERRA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-4)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= DEF PIE LLAVEABRE grafica_barras LLAVECIERRA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-4)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // grafica_barras ::= titulo ejex ejey unir 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("grafica_barras",1, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-3)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unir ::= DOSPUNTOS CORCHETEABRE LLAVEABRE ENTERO COMA ENTERO LLAVECIERRA COMA LLAVEABRE ENTERO COMA ENTERO LLAVECIERRA CORCHETECIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("unir",7, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-14)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ejey ::= DOSPUNTOS CORCHETEABRE ENTERO COMA ENTERO MAS ENTERO CORCHETECIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("ejey",4, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-8)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ejex ::= DOSPUNTOS CORCHETEABRE COMILLAS COMILLAS LETRA ENTERO COMILLAS COMILLAS COMA COMILLAS COMILLAS LETRA ENTERO COMILLAS COMILLAS CORCHETECIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("ejex",3, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-16)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // titulo ::= DOSPUNTOS COMILLAS COMILLAS LETRA ENTERO COMILLAS COMILLAS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("titulo",2, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-7)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // grafica_pie ::= titulo tipo etiquetas valores total unir extra 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("grafica_pie",5, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-6)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // extra ::= DOSPUNTOS COMILLAS COMILLAS LETRA COMILLAS COMILLAS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("extra",6, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-6)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // total ::= DOSPUNTOS ENTERO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("total",8, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-2)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valores ::= DOSPUNTOS CORCHETEABRE ENTERO COMA ENTERO CORCHETECIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("valores",9, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-6)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiquetas ::= DOSPUNTOS CORCHETEABRE COMILLAS COMILLAS LETRA ENTERO COMILLAS COMILLAS COMA COMILLAS COMILLAS LETRA ENTERO COMILLAS COMILLAS CORCHETECIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("etiquetas",10, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-16)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= DOSPUNTOS LETRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("tipo",11, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-2)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ejecutar ::= PARENTESISABRE COMILLAS COMILLAS LETRA ENTERO COMILLAS COMILLAS PARENTESISCIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$GraphicsInputParser$result = parser.getSymbolFactory().newSymbol("ejecutar",12, ((Symbol)CUP$GraphicsInputParser$stack.elementAt(CUP$GraphicsInputParser$top-8)), ((Symbol)CUP$GraphicsInputParser$stack.peek()), RESULT);
            }
          return CUP$GraphicsInputParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraphicsInputParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$GraphicsInputParser$do_action(
    int                        CUP$GraphicsInputParser$act_num,
    lr_parser CUP$GraphicsInputParser$parser,
    java.util.Stack            CUP$GraphicsInputParser$stack,
    int                        CUP$GraphicsInputParser$top)
    throws Exception
    {
              return CUP$GraphicsInputParser$do_action_part00000000(
                               CUP$GraphicsInputParser$act_num,
                               CUP$GraphicsInputParser$parser,
                               CUP$GraphicsInputParser$stack,
                               CUP$GraphicsInputParser$top);
    }
}

}
